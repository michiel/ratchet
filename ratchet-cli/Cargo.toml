[package]
name = "ratchet"
version.workspace = true
edition.workspace = true
# Inherit workspace-level package configuration
authors.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
description = "Ratchet CLI app"

# Dependencies
[dependencies]

# Use workspace-level dependencies
serde_json.workspace = true
serde_yaml = { workspace = true }
anyhow.workspace = true
clap.workspace = true
tracing.workspace = true
tracing-subscriber.workspace = true
chrono.workspace = true
tokio.workspace = true
uuid.workspace = true

# Local dependencies
# ratchet_lib = { path = "../ratchet-lib", optional = true } # REMOVED - migrated to modular crates
ratchet-execution = { path = "../ratchet-execution", optional = true }
ratchet-mcp = { path = "../ratchet-mcp", optional = true }
ratchet-config = { path = "../ratchet-config" }
ratchet-core = { path = "../ratchet-core" }
ratchet-storage = { path = "../ratchet-storage" }
ratchet-caching = { path = "../ratchet-caching", optional = true }
ratchet-resilience = { path = "../ratchet-resilience", optional = true }
ratchet-plugins = { path = "../ratchet-plugins", optional = true }
ratchet-runtime = { path = "../ratchet-runtime", optional = true }
ratchet-js = { path = "../ratchet-js", optional = true }
ratchet-http = { path = "../ratchet-http", optional = true }
ratchet-output = { path = "../ratchet-output", optional = true }
ratchet-server = { path = "../ratchet-server", optional = true }
ratchet-registry = { path = "../ratchet-registry", optional = true }
ratchet-interfaces = { path = "../ratchet-interfaces", optional = true }
ratchet-cli-tools = { path = "../ratchet-cli-tools", features = ["javascript", "recording", "http"] }

# Binary-specific dependencies (commented out for now due to network issues)
# dialoguer = "0.11"
# indicatif = "0.17"

# Console-specific dependencies
rustyline = { workspace = true }
clap_complete = "4.5"
colored = { workspace = true }
futures = { version = "0.3", optional = true }
tokio-stream = { version = "0.1", optional = true }
dirs = { workspace = true }
reqwest = { workspace = true }
regex = { workspace = true }
async-trait = { workspace = true }

# Update command dependencies
semver = "1.0"
sha2 = "0.10"
futures-util = "0.3"
thiserror = { workspace = true }
serde = { workspace = true }

# Feature flags for optional functionality
[features]
default = ["developer"]

# Core functionality (minimal build)
core = []
config = []

# Build profiles for different use cases
minimal = ["core"]
standard = ["core", "config", "git"]
complete = ["server", "database", "mcp-server", "plugins", "javascript", "output", "runtime", "http", "git"]
developer = ["complete", "caching", "resilience"]

# Server components
server = ["rest-api", "graphql-api", "dep:ratchet-execution", "dep:ratchet-server", "dep:ratchet-registry", "dep:ratchet-interfaces", "dep:futures", "dep:tokio-stream"]
rest-api = []
graphql-api = []

# Git repository support (using gitoxide with pure Rust and rustls)
git = ["dep:ratchet-registry", "ratchet-registry/git"]

# Database backends
database = ["sqlite"]
sqlite = ["ratchet-storage/database", "ratchet-storage/seaorm"]
postgres = ["ratchet-storage/postgres"]
mysql = ["ratchet-storage/mysql"]

# MCP Server implementation
mcp-server = ["mcp-stdio", "mcp-sse", "dep:ratchet-mcp", "dep:ratchet-execution"]
mcp-stdio = ["ratchet-mcp/transport-stdio"]
mcp-sse = ["ratchet-mcp/transport-sse"]

# Plugin system
plugins = ["static-plugins", "dep:ratchet-plugins"]
static-plugins = []
dynamic-plugins = ["ratchet-plugins/dynamic"]

# JavaScript execution
javascript = ["dep:ratchet-js"]

# Output destinations
output = ["dep:ratchet-output"]

# Caching backends
caching = ["dep:ratchet-caching"]

# Resilience patterns
resilience = ["dep:ratchet-resilience"]

# Runtime execution engine
runtime = ["dep:ratchet-runtime"]

# HTTP client functionality
http = ["dep:ratchet-http"]

# Legacy compatibility aliases
full = ["complete"]
dev-full = ["developer", "dynamic-plugins"]
production = ["server", "database", "mcp-server", "static-plugins", "output"]
enterprise = ["complete", "postgres"]

[dev-dependencies]
tempfile.workspace = true
