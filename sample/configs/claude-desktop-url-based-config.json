{
  "mcpServers": {
    "ratchet-server": {
      "command": "node",
      "args": [
        "-e",
        "const { EventSource } = require('eventsource'); const fetch = require('node-fetch'); const crypto = require('crypto'); const serverUrl = process.env.MCP_SERVER_URL || 'http://localhost:8090'; const authToken = process.env.MCP_AUTH_TOKEN; const timeout = parseInt(process.env.MCP_TIMEOUT || '30000'); class MCPClient { constructor() { this.sessionId = crypto.randomUUID(); this.sseUrl = `${serverUrl}/sse/${this.sessionId}`; this.messageUrl = `${serverUrl}/message/${this.sessionId}`; this.requestId = 1; } log(msg) { console.error(`[MCP] ${new Date().toISOString()} ${msg}`); } async connect() { this.log(`Connecting to ${this.sseUrl}`); const headers = {}; if (authToken) headers.Authorization = `Bearer ${authToken}`; this.es = new EventSource(this.sseUrl, { headers }); this.es.onopen = () => this.log('Connected'); this.es.onmessage = (event) => { try { console.log(event.data); } catch (e) { this.log(`Parse error: ${e}`); } }; this.es.onerror = (err) => { this.log(`Error: ${err}`); process.exit(1); }; process.stdin.setEncoding('utf8'); process.stdin.on('data', (data) => this.handleRequest(data.toString().trim())); process.stdin.resume(); } async handleRequest(data) { if (!data.trim()) return; try { const req = JSON.parse(data); if (!req.id) req.id = String(this.requestId++); this.log(`Request: ${req.method} (${req.id})`); const headers = { 'Content-Type': 'application/json' }; if (authToken) headers.Authorization = `Bearer ${authToken}`; const controller = new AbortController(); setTimeout(() => controller.abort(), timeout); await fetch(this.messageUrl, { method: 'POST', headers, body: JSON.stringify(req), signal: controller.signal }); } catch (error) { console.log(JSON.stringify({ jsonrpc: '2.0', id: req?.id || null, error: { code: -32603, message: error.message } })); } } } new MCPClient().connect();"
      ],
      "env": {
        "MCP_SERVER_URL": "http://localhost:8090",
        "MCP_AUTH_TOKEN": "",
        "MCP_TIMEOUT": "30000"
      }
    }
  }
}