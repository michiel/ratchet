{
  "mcpServers": {
    "ratchet-sse": {
      "command": "npx",
      "args": [
        "--yes",
        "--package=eventsource@^2.0.2",
        "node",
        "-e",
        "const { EventSource } = require('eventsource'); const process = require('process'); const crypto = require('crypto'); const serverUrl = process.env.RATCHET_SSE_URL || 'http://localhost:8090'; const timeout = parseInt(process.env.RATCHET_TIMEOUT || '30000'); const authToken = process.env.RATCHET_AUTH_TOKEN; class RatchetSSEClient { constructor() { this.sessionId = crypto.randomUUID(); this.sseUrl = `${serverUrl}/sse/${this.sessionId}`; this.messageUrl = `${serverUrl}/message/${this.sessionId}`; this.requestId = 1; this.connected = false; } log(message) { console.error(`[MCP-SSE] ${new Date().toISOString()} ${message}`); } async connect() { this.log(`Connecting to ${this.sseUrl}`); const headers = {}; if (authToken) headers['Authorization'] = `Bearer ${authToken}`; this.eventSource = new EventSource(this.sseUrl, { headers }); this.eventSource.onopen = () => { this.connected = true; this.log('Connected to Ratchet MCP server'); }; this.eventSource.onmessage = (event) => { try { console.log(event.data); } catch (e) { this.log(`Parse error: ${e.message}`); } }; this.eventSource.onerror = (error) => { this.connected = false; this.log(`Connection error: ${error.message || 'Unknown'}`); process.exit(1); }; process.stdin.setEncoding('utf8'); process.stdin.on('data', (data) => this.handleRequest(data.toString().trim())); process.stdin.resume(); } async handleRequest(data) { if (!data.trim()) return; try { const request = JSON.parse(data); if (!request.id) request.id = (this.requestId++).toString(); this.log(`Request: ${request.method || 'unknown'} (${request.id})`); const headers = { 'Content-Type': 'application/json' }; if (authToken) headers['Authorization'] = `Bearer ${authToken}`; const controller = new AbortController(); setTimeout(() => controller.abort(), timeout); const response = await fetch(this.messageUrl, { method: 'POST', headers, body: JSON.stringify(request), signal: controller.signal }); if (!response.ok) throw new Error(`HTTP ${response.status}`); } catch (error) { console.log(JSON.stringify({ jsonrpc: '2.0', id: request.id || null, error: { code: -32603, message: error.message } })); } } } new RatchetSSEClient().connect().catch(console.error);"
      ],
      "env": {
        "RATCHET_SSE_URL": "http://localhost:8090",
        "RATCHET_TIMEOUT": "30000",
        "RATCHET_AUTH_TOKEN": ""
      }
    }
  }
}