{
  "mcpServers": {
    "ratchet-http": {
      "command": "npx",
      "args": [
        "--yes",
        "--package=eventsource@^2.0.2",
        "--package=node-fetch@^3.3.2",
        "node",
        "-e",
        "const { EventSource } = require('eventsource');\nconst fetch = require('node-fetch');\nconst crypto = require('crypto');\n\nconst serverUrl = process.env.MCP_SERVER_URL || 'http://localhost:8090';\nconst authToken = process.env.MCP_AUTH_TOKEN;\nconst timeout = parseInt(process.env.MCP_TIMEOUT || '30000');\n\nclass RatchetMCPClient {\n  constructor() {\n    this.sessionId = crypto.randomUUID();\n    this.sseUrl = `${serverUrl}/sse/${this.sessionId}`;\n    this.messageUrl = `${serverUrl}/message/${this.sessionId}`;\n    this.requestId = 1;\n    this.connected = false;\n  }\n\n  log(message) {\n    console.error(`[Ratchet-MCP] ${new Date().toISOString()} ${message}`);\n  }\n\n  async connect() {\n    this.log(`Connecting to Ratchet server at ${this.sseUrl}`);\n    \n    const headers = {};\n    if (authToken) {\n      headers['Authorization'] = `Bearer ${authToken}`;\n    }\n\n    this.eventSource = new EventSource(this.sseUrl, { headers });\n    \n    this.eventSource.onopen = () => {\n      this.connected = true;\n      this.log('Successfully connected to Ratchet MCP server');\n    };\n\n    this.eventSource.onmessage = (event) => {\n      try {\n        // Forward SSE data directly to Claude Desktop\n        console.log(event.data);\n      } catch (error) {\n        this.log(`Failed to process message: ${error.message}`);\n      }\n    };\n\n    this.eventSource.onerror = (error) => {\n      this.connected = false;\n      this.log(`Connection error: ${error.message || 'Unknown error'}`);\n      process.exit(1);\n    };\n\n    // Handle requests from Claude Desktop\n    process.stdin.setEncoding('utf8');\n    process.stdin.on('data', (data) => {\n      this.handleClaudeRequest(data.toString().trim());\n    });\n\n    process.stdin.on('end', () => {\n      this.log('Claude Desktop disconnected');\n      this.disconnect();\n    });\n\n    process.stdin.resume();\n  }\n\n  async handleClaudeRequest(data) {\n    if (!data.trim()) return;\n\n    try {\n      const request = JSON.parse(data);\n      \n      // Ensure request has ID\n      if (!request.id) {\n        request.id = String(this.requestId++);\n      }\n\n      this.log(`Forwarding ${request.method || 'unknown'} request (ID: ${request.id})`);\n\n      // Send to Ratchet server via HTTP POST\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      \n      if (authToken) {\n        headers['Authorization'] = `Bearer ${authToken}`;\n      }\n\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      try {\n        const response = await fetch(this.messageUrl, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify(request),\n          signal: controller.signal\n        });\n\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        // Response comes via SSE, no need to handle here\n        \n      } catch (error) {\n        clearTimeout(timeoutId);\n        \n        // Send error response to Claude Desktop\n        const errorResponse = {\n          jsonrpc: '2.0',\n          id: request.id,\n          error: {\n            code: error.name === 'AbortError' ? -32603 : -32000,\n            message: error.name === 'AbortError' ? 'Request timeout' : error.message\n          }\n        };\n        \n        console.log(JSON.stringify(errorResponse));\n      }\n\n    } catch (parseError) {\n      this.log(`Failed to parse request: ${parseError.message}`);\n      \n      const errorResponse = {\n        jsonrpc: '2.0',\n        id: null,\n        error: {\n          code: -32700,\n          message: 'Parse error: Invalid JSON'\n        }\n      };\n      \n      console.log(JSON.stringify(errorResponse));\n    }\n  }\n\n  disconnect() {\n    if (this.eventSource) {\n      this.eventSource.close();\n    }\n    this.connected = false;\n    this.log('Disconnected from Ratchet server');\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\n// Start client\nconst client = new RatchetMCPClient();\nclient.connect().catch(error => {\n  console.error(`Failed to connect: ${error.message}`);\n  process.exit(1);\n});"
      ],
      "env": {
        "MCP_SERVER_URL": "http://localhost:8090",
        "MCP_AUTH_TOKEN": "",
        "MCP_TIMEOUT": "30000"
      }
    }
  }
}