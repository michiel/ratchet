# Example Ratchet Configuration for Claude Desktop Integration
#
# This configuration works for both:
# - ratchet serve (web server)
# - ratchet mcp-serve (Claude integration)
#
# Usage:
#   ratchet serve --config example-claude-config.yaml
#   ratchet mcp-serve --config example-claude-config.yaml

# Database configuration (shared by both servers)
database:
  url: "sqlite:ratchet-claude.db"
  # For production, use PostgreSQL:
  # url: "postgresql://user:password@localhost/ratchet"

# Task registry - where to find your tasks
task_registry:
  sources:
    - type: filesystem
      path: "./sample/js-tasks"
      enabled: true
      watch: true

# Logging configuration
logging:
  level: info
  sinks:
    # Console output
    - type: console
      level: info
      colored: true
    
    # File logging for debugging
    - type: file
      path: "ratchet-claude.log"
      level: debug
      rotation:
        size: "10MB"
        keep: 5

# Regular web server configuration (ratchet serve)
server:
  host: "127.0.0.1"
  port: 8080
  cors:
    enabled: true
    origins: ["*"]

# REST API configuration
rest:
  enabled: true
  prefix: "/api/v1"
  
# GraphQL configuration  
graphql:
  enabled: true
  endpoint: "/graphql"
  playground: true
  introspection: true

# MCP server configuration (ratchet mcp-serve)
mcp:
  enabled: true
  transport: stdio  # Perfect for Claude Desktop
  
  # Development settings (no authentication)
  auth_type: none
  
  # Production settings (uncomment and configure for production)
  # auth_type: api_key
  # api_keys:
  #   - key: "${MCP_API_KEY_CLAUDE}"
  #     name: "claude-desktop"
  #     permissions:
  #       can_execute_tasks: true
  #       can_read_logs: true
  #       can_read_traces: true
  #       allowed_task_patterns: ["*"]  # Allow all tasks
  #       rate_limits:
  #         executions_per_minute: 60
  #         logs_per_minute: 200
  
  # Performance settings
  max_connections: 10
  request_timeout: 30
  rate_limit_per_minute: 100
  
  # Security settings
  security:
    max_execution_time: 300  # 5 minutes
    input_sanitization: true
    audit_log_enabled: true

# Output destinations for task results
output:
  destinations:
    - name: "local-files"
      type: filesystem
      config:
        base_path: "./task-outputs"
        format: json
        
    # Example webhook destination
    # - name: "webhook-endpoint"
    #   type: webhook
    #   config:
    #     url: "https://your-server.com/webhook"
    #     method: POST
    #     headers:
    #       Authorization: "Bearer ${WEBHOOK_TOKEN}"

# Environment variable examples:
#
# For development:
# export RUST_LOG=info
#
# For production:
# export MCP_API_KEY_CLAUDE="your-secure-api-key-here"
# export WEBHOOK_TOKEN="your-webhook-auth-token"
# export DATABASE_URL="postgresql://user:password@localhost/ratchet"